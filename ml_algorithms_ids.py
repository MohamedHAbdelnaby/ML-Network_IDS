# -*- coding: utf-8 -*-
"""ML_Algorithms_IDS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UVMa3fAepQlOEWcIVq9hqGiLXt9PPess
"""

# Necessary libraries
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.metrics import accuracy_score, matthews_corrcoef, precision_score, recall_score, f1_score, confusion_matrix
from sklearn.preprocessing import LabelEncoder
import pandas as pd
import numpy as np

# Load the NSL-KDD dataset
dataset = pd.read_csv('NSL-KDD.csv')  # replace with your dataset path

# Preprocessing

# Fill missing values with mean for numerical columns and mode for categorical columns
numerical_cols = dataset.select_dtypes(include=[np.number]).columns
categorical_cols = dataset.select_dtypes(include=[object]).columns
dataset[numerical_cols] = dataset[numerical_cols].fillna(dataset[numerical_cols].mean())
dataset[categorical_cols] = dataset[categorical_cols].fillna(dataset[categorical_cols].mode().iloc[0])

# Convert categorical data to numerical data
label_encoder = LabelEncoder()
for col in categorical_cols:
    dataset[col] = label_encoder.fit_transform(dataset[col])

# Extract target class
X = dataset.iloc[:, :-1]  # feature vectors
y = dataset.iloc[:, -1]  # target class

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# Using J48 Decision Tree
clf_J48 = tree.DecisionTreeClassifier(class_weight='balanced')  # create the decision tree object
clf_J48.fit(X_train, y_train)  # train the model
predictions_J48 = clf_J48.predict(X_test)  # use the model to predict the test set

# Evaluation metrics for J48
accuracy_J48 = accuracy_score(y_test, predictions_J48)
mcc_J48 = matthews_corrcoef(y_test, predictions_J48)
precision_J48 = precision_score(y_test, predictions_J48, average='weighted')
recall_J48 = recall_score(y_test, predictions_J48, average='weighted')
f1_J48 = f1_score(y_test, predictions_J48, average='weighted')
print('J48 Accuracy: ', accuracy_J48)
print('J48 Matthews correlation coefficient: ', mcc_J48)
print('J48 Precision: ', precision_J48)
print('J48 Recall: ', recall_J48)
print('J48 F1-Score: ', f1_J48)

# Cross-validation for J48
scores = cross_val_score(clf_J48, X, y, cv=5)
print('Average cross-validation score: ', scores.mean())

# Using Random Forest
clf_RF = RandomForestClassifier(n_estimators=100, class_weight='balanced')  # create the random forest object
clf_RF.fit(X_train, y_train)  # train the model
predictions_RF = clf_RF.predict(X_test)  # use the model to predict the test set

# Evaluation metrics for Random Forest
accuracy_RF = accuracy_score(y_test, predictions_RF)
mcc_RF = matthews_corrcoef(y_test, predictions_RF)
precision_RF = precision_score(y_test, predictions_RF, average='weighted')
recall_RF = recall_score(y_test, predictions_RF, average='weighted')
f1_RF = f1_score(y_test, predictions_RF, average='weighted')
print('Random Forest Accuracy: ', accuracy_RF)
print('Random Forest Matthews correlation coefficient: ', mcc_RF)
print('Random Forest Precision: ', precision_RF)
print('Random Forest Recall: ', recall_RF)
print('Random Forest F1-Score: ', f1_RF)

# Cross-validation for Random Forest
scores = cross_val_score(clf_RF, X, y, cv=5)
print('Average cross-validation score: ', scores.mean())

# Hyperparameter tuning for Random Forest
parameters = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 5, 10, 15],
    'min_samples_split': [2, 5, 10]
}
clf_RF = GridSearchCV(clf_RF, parameters)
clf_RF.fit(X_train, y_train)
print('Best parameters: ', clf_RF.best_params_)

# Re-evaluate Random Forest with the best parameters
predictions_RF = clf_RF.predict(X_test)

accuracy_RF = accuracy_score(y_test, predictions_RF)
mcc_RF = matthews_corrcoef(y_test, predictions_RF)
precision_RF = precision_score(y_test, predictions_RF, average='weighted')
recall_RF = recall_score(y_test, predictions_RF, average='weighted')
f1_RF = f1_score(y_test, predictions_RF, average='weighted')
print('Tuned Random Forest Accuracy: ', accuracy_RF)
print('Tuned Random Forest Matthews correlation coefficient: ', mcc_RF)
print('Tuned Random Forest Precision: ', precision_RF)
print('Tuned Random Forest Recall: ', recall_RF)
print('Tuned Random Forest F1-Score: ', f1_RF)

# Confusion matrix for the best model
print('Confusion Matrix: \n', confusion_matrix(y_test, predictions_RF))